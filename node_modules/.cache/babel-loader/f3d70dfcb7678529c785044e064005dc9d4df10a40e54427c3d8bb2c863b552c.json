{"ast":null,"code":"import{useState}from\"react\";export const useLocalStorage=(key,initialValue)=>{// State to store our value\n// Pass initial state function to useState so logic is only executed once\nconst[storedValue,setStoredValue]=useState(()=>{try{// Get from local storage by key\nconst item=window.localStorage.getItem(key);// Parse stored json or if none return initialValue\nreturn item?JSON.parse(item):initialValue;}catch(error){// If error also return initialValue\nconsole.log(error);return initialValue;}});// Return a wrapped version of useState's setter function that ...\n// ... persists the new value to localStorage.\nconst setValue=value=>{try{// Allow value to be a function so we have same API as useState\nconst valueToStore=value instanceof Function?value(storedValue):value;// Save state\nsetStoredValue(valueToStore);// Save to local storage\nwindow.localStorage.setItem(key,JSON.stringify(valueToStore));}catch(error){// A more advanced implementation would handle the error case\nconsole.log(error);}};return[storedValue,setValue];};","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["C:/Users/Admin/vs-code-local/github.io/src/hooks/useLocalStorage.js"],"sourcesContent":["import {useState} from \"react\";\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n"],"mappings":"AAAA,OAAQA,QAAQ,KAAO,OAAO,CAE9B,MAAO,MAAMC,gBAAe,CAAG,CAACC,GAAG,CAAEC,YAAY,GAAK,CACpD;AACA;AACA,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGL,QAAQ,CAAC,IAAM,CACnD,GAAI,CACF;AACA,KAAMM,KAAI,CAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC,CAC7C;AACA,MAAOI,KAAI,CAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAAGH,YAAY,CAC/C,CAAE,MAAOS,KAAK,CAAE,CACd;AACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAClB,MAAOT,aAAY,CACrB,CACF,CAAC,CAAC,CAEF;AACA;AACA,KAAMY,SAAQ,CAAGC,KAAK,EAAI,CACxB,GAAI,CACF;AACA,KAAMC,aAAY,CAChBD,KAAK,WAAYE,SAAQ,CAAGF,KAAK,CAACZ,WAAW,CAAC,CAAGY,KAAK,CACxD;AACAX,cAAc,CAACY,YAAY,CAAC,CAC5B;AACAV,MAAM,CAACC,YAAY,CAACW,OAAO,CAACjB,GAAG,CAAEQ,IAAI,CAACU,SAAS,CAACH,YAAY,CAAC,CAAC,CAChE,CAAE,MAAOL,KAAK,CAAE,CACd;AACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CACpB,CACF,CAAC,CAED,MAAO,CAACR,WAAW,CAAEW,QAAQ,CAAC,CAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}